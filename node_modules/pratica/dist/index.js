'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var isProperCata = function isProperCata(obj) {
  return obj.Ok && obj.Err;
};
var improperCata = function improperCata() {
  throw new Error('Cata missing Ok or Err');
};
var Ok = function Ok(arg) {
  return {
    ap: function ap(cb) {
      return cb.map(function (x) {
        return arg(x);
      });
    },
    map: function map() {
      for (var _len = arguments.length, cbs = new Array(_len), _key = 0; _key < _len; _key++) {
        cbs[_key] = arguments[_key];
      }
      return Ok(cbs.reduce(function (acc, cb) {
        return cb(acc);
      }, arg));
    },
    mapErr: function mapErr() {
      return Ok(arg);
    },
    chain: function chain(cb) {
      return cb(arg);
    },
    chainErr: function chainErr() {
      return Ok(arg);
    },
    swap: function swap() {
      return Err(arg);
    },
    bimap: function bimap(ok, _) {
      return Ok(ok(arg));
    },
    cata: function cata(obj) {
      return isProperCata(obj) ? obj.Ok(arg) : improperCata();
    },
    toMaybe: function toMaybe() {
      return Just(arg);
    },
    inspect: function inspect() {
      return "Ok(".concat(arg, ")");
    },
    isErr: function isErr() {
      return false;
    },
    isOk: function isOk() {
      return true;
    }
  };
};
var Err = function Err(arg) {
  return {
    ap: function ap() {
      return Err(arg);
    },
    map: function map() {
      return Err(arg);
    },
    mapErr: function mapErr(cb) {
      return Err(cb(arg));
    },
    chain: function chain() {
      return Err(arg);
    },
    chainErr: function chainErr(cb) {
      return cb(arg);
    },
    swap: function swap() {
      return Ok(arg);
    },
    bimap: function bimap(_, err) {
      return Err(err(arg));
    },
    cata: function cata(obj) {
      return isProperCata(obj) ? obj.Err(arg) : improperCata();
    },
    toMaybe: function toMaybe() {
      return Nothing;
    },
    inspect: function inspect() {
      return "Err(".concat(arg, ")");
    },
    isErr: function isErr() {
      return true;
    },
    isOk: function isOk() {
      return false;
    }
  };
};

var isProperCata$1 = function isProperCata(obj) {
  return obj.Just && obj.Nothing;
};
var improperCata$1 = function improperCata() {
  throw new Error('Cata missing Just or Nothing');
};
var Just = function Just(arg) {
  return {
    ap: function ap(cb) {
      return cb.map(function (x) {
        return arg(x);
      });
    },
    map: function map() {
      for (var _len = arguments.length, cbs = new Array(_len), _key = 0; _key < _len; _key++) {
        cbs[_key] = arguments[_key];
      }
      return Just(cbs.reduce(function (acc, cb) {
        return cb(acc);
      }, arg));
    },
    chain: function chain(cb) {
      return cb(arg);
    },
    default: function _default() {
      return Just(arg);
    },
    cata: function cata(obj) {
      return isProperCata$1(obj) ? obj.Just(arg) : improperCata$1();
    },
    toResult: function toResult() {
      return Ok(arg);
    },
    inspect: function inspect() {
      return "Just(".concat(arg, ")");
    },
    isNothing: function isNothing() {
      return false;
    },
    isJust: function isJust() {
      return true;
    }
  };
};
var Nothing = {
  ap: function ap() {
    return Nothing;
  },
  map: function map() {
    return Nothing;
  },
  chain: function chain() {
    return Nothing;
  },
  default: function _default(cb) {
    return Just(cb());
  },
  cata: function cata(obj) {
    return isProperCata$1(obj) ? obj.Nothing() : improperCata$1();
  },
  toResult: function toResult() {
    return Err();
  },
  inspect: function inspect() {
    return "Nothing";
  },
  isNothing: function isNothing() {
    return true;
  },
  isJust: function isJust() {
    return false;
  }
};
var Maybe = function Maybe(arg) {
  return arg === null || arg === undefined ? Nothing : Just(arg);
};

var isFunc = function isFunc(func) {
  return !!(func && func.constructor && func.call && func.apply);
};
var encase = function encase(func) {
  if (!isFunc(func)) {
    return Nothing;
  }
  try {
    var res = func();
    return Just(res);
  } catch (_unused) {
    return Nothing;
  }
};
var encaseRes = function encaseRes(func) {
  if (!isFunc(func)) {
    return Err('Not a function');
  }
  try {
    var res = func();
    return Ok(res);
  } catch (e) {
    return Err(e);
  }
};

var get = function get(selector) {
  return function (data) {
    return Maybe(selector.reduce(function (acc, s) {
      return acc && acc[s] !== undefined ? acc[s] : null;
    }, data));
  };
};

var head = function head(arr) {
  return arr.length ? Just(arr[0]) : Nothing;
};

var justs = function justs() {
  var arr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  return arr.filter(function (a) {
    return a.isJust && a.isJust();
  });
};

var last = function last(arr) {
  return arr.length ? Just(arr[arr.length - 1]) : Nothing;
};

var oks = function oks() {
  var arr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  return arr.filter(function (a) {
    return a.isOk && a.isOk();
  });
};

var parseDate = function parseDate(date) {
  return Maybe(date).map(function (d) {
    return new Date(d);
  }).chain(function (d) {
    return isNaN(d.valueOf()) ? Nothing : Just(d);
  });
};

var tail = function tail(arr) {
  return arr.length ? Just(arr.slice(1)) : Nothing;
};

var tryFind = function tryFind(exp) {
  return function (data) {
    return Maybe(data.find(exp));
  };
};

exports.encase = encase;
exports.encaseRes = encaseRes;
exports.get = get;
exports.head = head;
exports.justs = justs;
exports.last = last;
exports.Just = Just;
exports.Nothing = Nothing;
exports.Maybe = Maybe;
exports.oks = oks;
exports.parseDate = parseDate;
exports.Ok = Ok;
exports.Err = Err;
exports.tail = tail;
exports.tryFind = tryFind;
