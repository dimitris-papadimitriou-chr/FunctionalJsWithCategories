'use strict';

var __metamagical_withMeta = function metamagical_withMeta(object, meta) {
  var parent = Object.getPrototypeOf(object);var oldMeta = object[Symbol.for('@@meta:magical')] || {};if (parent && parent[Symbol.for('@@meta:magical')] === oldMeta) {
    oldMeta = {};
  }Object.keys(meta).forEach(function (key) {
    if (/^~/.test(key)) {
      oldMeta[key.slice(1)] = meta[key];
    } else {
      oldMeta[key] = meta[key];
    }
  });object[Symbol.for('@@meta:magical')] = oldMeta;return object;
};

//----------------------------------------------------------------------
//
// This source file is part of the Folktale project.
//
// Licensed under MIT. See LICENCE for full licence information.
// See CONTRIBUTORS for the list of contributors to the project.
//
//----------------------------------------------------------------------

var _require = require('../helpers/fantasy-land'),
    flAlt = _require.alt;

var curry = require('../core/lambda/curry');
var warn = require('../helpers/warn-deprecated-method')('alt');
var unsupported = require('../helpers/unsupported-method')('alt');

var isNew = function isNew(a) {
  return typeof a[flAlt] === 'function';
};
var isOld = function isOld(a) {
  return typeof a.alt === 'function';
};

/*~
 * stability: stable
 * authors:
 *   - "@joshmili"
 *
 * type: |
 *   forall F, a:
 *     (F a, F a) => F a
 *   where F is Alt
 */
var alt = __metamagical_withMeta(function (aAlt, bAlt) {
  return isNew(bAlt) ? bAlt[flAlt](aAlt) : isOld(aAlt) ? warn(aAlt.ap(bAlt)) : /*otherwise*/unsupported(aAlt);
}, {
  'name': 'alt',
  'source': '(aAlt, bAlt) =>\n  isNew(bAlt)   ?  bAlt[flAlt](aAlt)\n: isOld(aAlt)   ?  warn(aAlt.ap(bAlt))\n: /*otherwise*/    unsupported(aAlt)',
  'signature': 'alt(aAlt, bAlt)',
  'location': {
    'filename': 'source/fantasy-land/alt.js',
    'start': {
      'line': 28,
      'column': 0
    },
    'end': {
      'line': 31,
      'column': 37
    }
  },
  'module': 'folktale/fantasy-land/alt',
  'licence': 'MIT',
  'authors': ['@joshmili'],
  'repository': 'https://github.com/origamitower/folktale',
  'npmPackage': 'folktale',
  'copyright': '(c) 2013-2017 Quildreen Motta, and CONTRIBUTORS',
  'maintainers': ['Quildreen Motta <queen@robotlolita.me> (http://robotlolita.me/)'],
  'stability': 'stable',
  'type': 'forall F, a:\n  (F a, F a) => F a\nwhere F is Alt\n'
});

/*~
 * stability: stable
 * authors:
 *   - "@joshmili"
 *
 * type: |
 *   forall F, a:
 *     (F a) => (F a) => F a
 *   where F is Alt
 */
alt.curried = __metamagical_withMeta(curry(2, alt), {
  'name': 'curried',
  'source': 'curry(2, alt)',
  'belongsTo': function belongsTo() {
    return alt;
  },
  'stability': 'stable',
  'authors': ['@joshmili'],
  'type': 'forall F, a:\n  (F a) => (F a) => F a\nwhere F is Alt\n'
}); // eslint-disable-line no-magic-numbers


/*~
 * stability: experimental
 * authors:
 *   - "@joshmili"
 *
 * type: |
 *   forall F, a:
 *     (F a).(F a) => F a
 *   where F is Alt
 */
alt.infix = __metamagical_withMeta(function (aAlt) {
  return alt(this, aAlt);
}, {
  'name': 'infix',
  'source': 'function(aAlt) {\n  return alt(this, aAlt);\n}',
  'signature': 'infix(aAlt)',
  'belongsTo': function belongsTo() {
    return alt;
  },
  'stability': 'experimental',
  'authors': ['@joshmili'],
  'type': 'forall F, a:\n  (F a).(F a) => F a\nwhere F is Alt\n'
});

module.exports = alt;